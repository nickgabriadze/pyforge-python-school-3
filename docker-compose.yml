version: '3.8'
services:

  web1:
    build: .
    volumes:
      - ./src:/src
    environment:
      SERVER_ID: SERVER-1
    expose:
      - "8000"

  web2:
    build: .
    volumes:
      - ./src:/src
    environment:
      SERVER_ID: SERVER-2
    expose:
      - "8000"

  nginx:
    image: nginx:latest
    ports:
      - "80"
    volumes:
      - ./nginx:/etc/nginx/conf.d
    depends_on:
      - web1
      - web2

  redis:
    image: "redis:alpine"
    restart: 'always'
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "6379:6379"

  celery_worker:
    build: .
    command: celery -A src.celery_worker worker --loglevel=info
    depends_on:
      - redis
    volumes:
      - .:/app

  postgres:
    image: postgres:latest
    container_name: postgres_molecules_database
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432"
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true


  airflow_webserver:
    image: apache/airflow:2.6.3
    container_name: airflow_webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./airflow/dags:/opt/airflow/dags
    command: airflow webserver

  airflow_scheduler:
    image: apache/airflow:2.6.3
    container_name: airflow_scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./airflow/dags:/opt/airflow/dags
    command: airflow scheduler

  airflow_worker:
    image: apache/airflow:2.6.3
    container_name: airflow_worker
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./airflow/dags:/opt/airflow/dags
    command: airflow celery worker

  airflow_init:
    image: apache/airflow:2.6.3
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./airflow/dags:/opt/airflow/dags
    entrypoint: "airflow db init"

volumes:
  cache:
    driver: local
  pgdata:
    driver: local
